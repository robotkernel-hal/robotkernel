#!/usr/bin/python

import os
import sys
import pprint
import yaml

def usage():
    print "usage: %s rk_config_fn" % sys.argv[0]
    sys.exit(1)

class config(object):
    pass

cfg = config()
cfg.rk_domain_base = "/volume/software/robotkernel/packages"
cfg.rk_version = "latest"
cfg.rk_config_fn = None
cfg.with_gui = False
cfg.with_rk = True
cfg.with_undef = True
cfg.with_realpath = True

cfg.module_sercos_deps = "interface_sercos_protocol,interface_key_value,interface_process_data_inspection"
cfg.module_soem_deps = "interface_canopen_protocol,interface_key_value,interface_process_data_inspection"
cfg.module_xsens_deps = "interface_process_data_inspection"
cfg.module_w83627_deps = "interface_key_value,interface_process_data_inspection"
cfg.module_jitter_measurement_deps = "interface_process_data_inspection"
cfg.module_sr_sim_deps = "interface_process_data_inspection,interface_key_value"
cfg.module_data_generator_deps = "interface_process_data_inspection"

skip = 0
for i, arg in enumerate(sys.argv[1:]):
    if skip:
        skip -= 1
        continue

    if arg.startswith("without_"):
        if "=" in arg:
            key, value = arg.split("=", 1)
            value = value.lower() in ("true", "1", "on")
        else:
            key = arg
            value = True
        key = key.replace("without_", "with_")
        setattr(cfg, key, not value)
        continue
    if arg.startswith("with_"):
        if "=" in arg:
            key, value = arg.split("=", 1)
            value = value.lower() in ("true", "1", "on")
        else:
            key = arg
            value = True
        setattr(cfg, key, value)
        continue
    
    found = False
    for key, value in cfg.__dict__.iteritems():
        if arg.startswith(key + "="):
            setattr(cfg, key, arg.split("=", 1)[1])
            found = True
            break
    if found:
        continue
    
    if "=" in arg:
        key, value = arg.split("=", 1)
        setattr(cfg, key, value)
        continue
    
    if cfg.rk_config_fn is not None:
        usage()
    cfg.rk_config_fn = arg

if not cfg.rk_config_fn:
    usage()

fp = file(cfg.rk_config_fn, "rb")
rkconfig = yaml.load(fp)
fp.close()

seen = set()

def process_module(mod_fn):
    if mod_fn in seen:
        return
    seen.add(mod_fn)
    
    local_part = os.path.join("share", "ln", mod_fn + ".inc.lnc")
    
    ver_or_file = cfg.__dict__.get(mod_fn, cfg.rk_version)
    if ver_or_file.startswith("optional "):
        optional_include = True
        ver_or_file = ver_or_file.split(" ", 1)[1]
    else:
        optional_include = False
    if ver_or_file[0] in (".", "/"):
        # assume file!
        pkg_base = ver_or_file
        if pkg_base[-1] == "/" or os.path.isdir(pkg_base):
            pkg_base = os.path.join(pkg_base, local_part)
    else:
        # assume version
        try:
            pkg_base = os.path.join(cfg.rk_domain_base, mod_fn, ver_or_file, local_part)
        except:
            print repr((cfg.rk_domain_base, mod_fn, ver_or_file, local_part))
            raise
    if cfg.with_realpath:
        pkg_base = os.path.realpath(pkg_base)
    if optional_include:
        print "optional_include %s" % pkg_base
    else:
        print "include %s" % pkg_base

    deps = getattr(cfg, "%s_deps" % mod_fn, [])
    if deps:
        deps = [dep.strip() for dep in deps.split(",")]

    if os.path.isfile(pkg_base):
        fp = file(pkg_base)
        for line in fp:
            line = line.strip()
            if line.startswith("# rk_depends:"):
                for dep in map(str.strip, line.split(":", 1)[1].strip().split(",")):
                    if dep not in deps:
                        deps.append(dep)
        fp.close()
    if not deps:
        return
    for dep in deps:
        process_module(dep)

for module in rkconfig["modules"]:
    mod_fn = module["module_file"]
    if mod_fn[0] in ("/", "."):
        # either abs or rel
        continue
    if not mod_fn.startswith("lib"):
        continue
    if not mod_fn.endswith(".so"):
        continue
    mod_fn = mod_fn[3:].rsplit(".", 1)[0]
    process_module(mod_fn)

if cfg.with_rk:
    process_module("robotkernel")
if cfg.with_gui:
    process_module("robotkernel_gui")

if cfg.with_undef:
    print """defines
undef: rk_base
undef: rk_depends_on
undef: rk_start_as
undef: rk_start_on_ready
undef: rk_modules
undef: rk_interfaces
undef: rkgui_path"""
